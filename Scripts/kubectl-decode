#!/bin/bash

function help() {
    cat << EOF
Get a secret and decode the data object. Will show secrets in cleartext.

Requirements:
    yq or jq must be installed. Default behavior is to prefer yq.

Examples:
    # Decode a secret
    kubectl decode secret-name

    # Decode a secret and display as YAML (Default)
    kubectl decode -o yaml secret-name

    # Decode a secret and display as JSON
    kubectl decode -o json secret-name

    # Decode a secret in an alternate namespace
    kubectl decode -n namespace secret-name
EOF
}

function kubectl_decode() {
    func=''
    args=$(echo "$@" | awk '$1=$1')

    # Check for -o flag first
    if [[ "$args" == *"-oyaml"* || "$args" == *"-o yaml"* ]]; then
        func=yq_decode
    elif [[ "$args" == *"-ojson"* || "$args" == *"-o json"* ]]; then
        func=jq_decode
    # Determine parser by installation
    elif command -v yq >/dev/null 2>&1; then
        func=yq_decode
    elif command -v jq >/dev/null 2>&1; then
        func=jq_decode
    fi

    if [[ -z ${func:+x} ]]; then
        echo "Error! Unable to find parser. Please install either jq or yq."
        exit 1
    fi

    $func $args
}

function yq_decode() {
    kubectl get secret -o yaml $@ | yq '.data.[] |= @base64d'
}

function jq_decode() {
    kubectl get secret -o json $@ | jq '.data |= map_values(@base64d)'
}

echo "$*"

if [[ "$*" == *" --help"* || "$*" == *" -h"* || -z $1 ]]; then
    help
    exit 0
fi

kubectl_decode $@
